#include <stdio.h>
void quicksort(int* arr, int left, int right) {
	if (left > right) return;
	int LE = left, RI = right;
	while (left != right) {
		while (arr[right] >= arr[LE] && right > left) {
			right--;
		}
		while (arr[left]<=arr[LE] && right > left) {
			left++;
		}
		if (left < right) {
			int lef = arr[left];
			arr[left] = arr[right];
			arr[right] = lef;
		}
	}
	int lef = arr[LE];
	arr[LE] = arr[left];
	arr[left] = lef;
	quicksort(arr, LE, left - 1);
	quicksort(arr, right + 1, RI);
	return;
}
void swap(int* arr, int a, int b) {
	int lef = arr[a];
	arr[a] = arr[b];
	arr[b] = lef;
}
void siftdown(int* arr,int n, int tar) {
	int t = tar, flag = 0;
	while (tar * 2 <= n && flag == 0) {
		if (arr[tar * 2] > arr[tar]) {
			t = tar * 2;
		}
		if (tar * 2 + 1 <= n && arr[tar * 2 + 1] > arr[t]) {
			t = tar * 2 + 1;
		}
		if (t != tar) {
			swap(arr, t, tar);
			tar = t;
		}
		else {
			flag = 1;
		}
	}
	return;
}
void creat(int *arr,int n) {
	for (int i = n / 2; i >= 0; i--) {
		siftdown(arr,n - 1,i);
	}
}
void heapsort(int* arr, int n) {
	while (n > 1) {
		swap(arr, 0, n - 1);
		n--;
		siftdown(arr,n - 1,0);
	}
	return;
}
int main(){
	int arr[5] = { 5,3,6,2,1 };
	quicksort(arr, 0, 4);
	int AO[9] = { 3,6,2,1,9,7,5,4,8 };
	creat(AO, 9);
	heapsort(AO, 9);
	for (int i = 0; i < 5; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
	for (int i = 0; i < 9; i++) {
		printf("%d ", AO[i]);
	}
	return 0;
}
