#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h>
#include <Windows.h>
typedef struct queue {
	int data[1000];
	int head;
	int tail;
}shoupai;
typedef struct stack {
	int data[1000];
	int top;
}paidui;
bool test(struct queue P)
{
	if (P.head >= P.tail) return false;
	else return true;
}
int teststack(struct stack R)
{
	int tem = R.data[R.top];
	int T = R.top;
	while (T > 0 && tem != R.data[--T]);
	return T;
}//T为0则未找到，不为0则是返回相等值坐标
void Change(struct stack *R,struct queue *P)
{
	int tem = teststack(*R);
	if (tem)
	{
		int tack = (*R).top;
		while ((*R).top >= tem)
			(*P).data[(*P).tail++] = (*R).data[(*R).top--];
	}
}
int Show(struct stack* R1, struct queue* P1,int a)
{
	Change(R1, P1);
	if (!test(*P1)) {
		printf("Winner is P%d\n",a);
		return 1;
	}
	else {
		printf("P%d选手目前的手牌是：",a);
		for (int i = (*P1).head; i < (*P1).tail; i++) {
			printf("%d ", (*P1).data[i]);
		}
		printf("\n");
		//Sleep(600);
	}
	printf("牌堆目前的存牌是：");
	for (int i = 1; i <= (*R1).top; i++) {
		printf("%d ", (*R1).data[i]);
	}
	printf("\n\n");
	//Sleep(600);
	return 0;
}
int main() 
{//假设每人六张牌，每张牌都属于1--9;
	system("color 0b");
	shoupai P1, P2;
	paidui R1;
	P1.head = 1, P1.tail = 1;
	P2.head = 1, P2.tail = 1;
	R1.top = 0, R1.data[0] = 0;
	srand((unsigned int)time(NULL));
	int ret = rand() % 9 + 1;
	for (int i = 0; i < 6; i++) {
		P1.data[P1.tail++] = rand() % 9 + 1;
	}
	for (int i = 0; i < 6; i++) {
		P2.data[P2.tail++] = rand() % 9 + 1;
	}//对P1，P2随机初始化手牌
	//P1.data[1] = 2, P1.data[2] = 4, P1.data[3] = 1, P1.data[4] = 2, P1.data[5] = 5, P1.data[6] = 6;
	//P2.data[1] = 3, P2.data[2] = 1, P2.data[3] = 3, P2.data[4] = 5, P2.data[5] = 6, P2.data[6] = 4;
	//P1.tail += 6, P2.tail += 6;//固定输入
	while (1)
	{
		if (!test(P1)) break;
		if (!test(P2)) break;
		R1.data[++R1.top] = P1.data[P1.head++];
		if(Show(&R1,&P1,1))
			break;
		R1.data[++R1.top] = P2.data[P2.head++];
		if (Show(&R1, &P2,2))
			break;
		if (P1.head >= 700 && P2.head >= 700) {
			printf("Too much to clarify so I guess there's no winner\n");
			break;
		}
	}
	return 0;
}
