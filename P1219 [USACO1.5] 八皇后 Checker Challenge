#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
using namespace std;
int n, TUR = 0;
void DFS(vector<int> Row, vector<int> Line, vector<int> Diagonal, vector<int> Diagonalanti, int x) {
	if (x > n) {
		if (TUR < 3) {
			for (int i = 1; i <= n; i++) {
				cout << Row[i] << ' ';
			}
			cout << endl;
		}
		TUR++;
		return;
	}
	for (int i = 1; i <= n; i++) {
		if (Line[i] == 0 && Diagonal[x - i + n]==0 && Diagonalanti[x + i - 1] == 0) {
			Row[x] = i, Line[i] = 1, Diagonal[x - i + n] = 1, Diagonalanti[x + i - 1] = 1;
			DFS(Row, Line, Diagonal, Diagonalanti, x + 1);
			Row[x] = 0, Line[i] = 0, Diagonal[x - i + n] = 0, Diagonalanti[x + i - 1] = 0;
		}
	}
}
int main() {
	cin >> n;
	vector<int> Row(n + 1, 0);
	vector<int> Line(n + 1, 0);
	vector<int> Diagonal(2 * n + 2, 0);
	vector<int> Diagonalanti(2 * n + 2, 0);
	DFS(Row, Line, Diagonal, Diagonalanti, 1);
	cout << TUR;
	return 0;
}
