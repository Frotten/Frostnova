class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int sizel = nums.size();
        int maxsize = 1,maxval = nums[0];
        vector<int> DP(sizel,1);
        for(int i = 1;i < sizel;i++){
            for(int j = 0;j < i;j++){
                if(nums[i] % nums[j] == 0) DP[i] = max(DP[i],DP[j] + 1);
            }
            if(DP[i] > maxsize){
                maxsize = DP[i];
                maxval = nums[i];
            }
        }
        vector<int> Ans;
        if(maxsize == 1){
            Ans.push_back(nums[0]);
            return Ans;
        }
        for(int i = sizel - 1;i >= 0 && maxsize > 0;i--){
            if(DP[i] == maxsize && maxval % nums[i] == 0){
                maxsize--;
                Ans.push_back(nums[i]);
                maxval = nums[i];
            }
        }
        return Ans;
    }
};
