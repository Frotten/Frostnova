#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <unordered_map>
using namespace std;
typedef struct ListNode {
	int start;
	int end;
	int weight;
}Node;
int compar(Node& A, Node& B) {
	return A.weight > B.weight;
}
vector<Node> Tar;
int FL[100005] = { 0 };
int getf(int a) {
	if (FL[a] != a) {
		FL[a] = getf(FL[a]);
	}
	return FL[a];
}
int main() {
	int N, K;
	long long cost = 0;
	long long Fee = 0;
	cin >> N >> K;
	for (int i = 0; i <= N; i++) FL[i] = i;
	unordered_map<int, bool> Enemy;
	for (int i = 0; i < K; i++) {
		int temp;
		cin >> temp;
		Enemy[temp] = true;
	}
	for (int i = 1; i < N; i++) {
		int A, B, C;
		cin >> A >> B >> C;
		Node TIML;
		TIML.start = A;
		TIML.end = B;
		TIML.weight = C;
		Tar.push_back(TIML);
		cost += C;
	}
	sort(Tar.begin(), Tar.end(), compar);
	for (Node& Tack : Tar) {
		int ST = getf(Tack.start);
		int EN = getf(Tack.end);
		if (Enemy[ST] == false || Enemy[EN] == false) {
			Fee += Tack.weight;
			FL[ST] = EN;
			Enemy[EN] = (Enemy[EN] || Enemy[ST]);
		}
	}
	cout << cost - Fee;
	return 0;
}
