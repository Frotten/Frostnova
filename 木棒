#include <stdio.h>
#include <stdlib.h>
#define N 70
int n;
int ar[N], vis[N], len, sum;
int cmp(const void* a, const void* b) {
	return *(int*)b - *(int*)a; 
}
int dfs(int u, int s, int start) {
	if (u * len == sum) return 1; 
	if (s == len) return dfs(u + 1, 0, 0); 
	for (int i = start; i <= n; i++) { 
		if (vis[i] == 0 && s + ar[i] <= len) {
			vis[i] = 1;
			if (dfs(u, s + ar[i], i + 1)) {
				return 1;
			}
			else {
				vis[i] = 0;
				if (s == 0 || s + ar[i] == len) return 0;
				int j = i;
				while (j <= n && ar[i] == ar[j]) {
					j++;
				}
				i = j - 1;
			}
		}
	}
	return 0;
}
int main() 
{
	while (scanf("%d", &n) == 1 && n != 0) { 
		int mx = 0;
		sum = 0;
		for (int i = 1; i <= n; i++) {
			scanf("%d", &ar[i]);
			sum += ar[i];
			mx = (mx > ar[i]) ? mx : ar[i];
		}
		memset(vis, 0, sizeof(vis));
		qsort(ar + 1, n, sizeof(int), cmp);
		len = mx;
		while (1) {
			while (sum % len != 0) len++;
			if (dfs(0, 0, 1)) {
				printf("%d\n", len); 
				break;
			}
			len++;
		}
	}
	return 0;
}
