#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <cstring>
using namespace std;
typedef struct Liu {
	int time;
	int x;
	int y;
}ST;
typedef struct act {
	int time;
	int x;
	int y;
	act(int a, int b, int c) :time(a), x(b), y(c) {};
}Action;
int map[400][400];
int Book[400][400];
int locat[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };
ST Star[50005];
int M;
int TIL(int a) {
	if (a == -1) return 999999;
	else return a;
}
int main() {
	memset(map, -1, sizeof(map));
	cin >> M;
	for (int i = 1; i <= M; i++) {
		cin >> Star[i].x >> Star[i].y >> Star[i].time;
		if (map[Star[i].x][Star[i].y] != -1) map[Star[i].x][Star[i].y] = min(Star[i].time, map[Star[i].x][Star[i].y]);
		else map[Star[i].x][Star[i].y] = Star[i].time;
		if (map[Star[i].x + 1][Star[i].y] != -1) map[Star[i].x + 1][Star[i].y] = min(Star[i].time, map[Star[i].x + 1][Star[i].y]);
		else map[Star[i].x + 1][Star[i].y] = Star[i].time;
		if (map[Star[i].x][Star[i].y + 1] != -1) map[Star[i].x][Star[i].y + 1] = min(Star[i].time, map[Star[i].x][Star[i].y + 1]);
		else map[Star[i].x][Star[i].y + 1] = Star[i].time;
		if (Star[i].y - 1 >= 0) {
			if (map[Star[i].x][Star[i].y - 1] != -1) map[Star[i].x][Star[i].y - 1] = min(Star[i].time, map[Star[i].x][Star[i].y - 1]);
			else map[Star[i].x][Star[i].y - 1] = Star[i].time;
		}
		if (Star[i].x - 1 >= 0) {
			if (map[Star[i].x - 1][Star[i].y] != -1) map[Star[i].x - 1][Star[i].y] = min(Star[i].time, map[Star[i].x - 1][Star[i].y]);
			else map[Star[i].x - 1][Star[i].y] = Star[i].time;
		}
	}
	queue<Action> Chara;
	Chara.push({0,0,0});
	Book[0][0] = 1;
	while (!Chara.empty()) {
		//cout << "Chara.front().x:" << Chara.front().x << "    " << "Chara.front().y:" << Chara.front().y << endl;
		if (map[Chara.front().x][Chara.front().y] == -1) {
			cout << Chara.front().time;
			return 0;
		}
		else if (map[Chara.front().x][Chara.front().y] <= Chara.front().time) {
			Chara.pop();
			continue;
		}
		for (int i = 0; i <= 3; i++) {
			int X = locat[i][0] + Chara.front().x;
			int Y = locat[i][1] + Chara.front().y;
			if (X >= 0 && Y >= 0 && Chara.front().time + 1 < TIL(map[X][Y]) && Book[X][Y] == 0) {
				Chara.push({ Chara.front().time + 1,X,Y });
				Book[X][Y] = 1;
			}
		}
		Chara.pop();
	}
	cout << -1;
	return 0;
}
