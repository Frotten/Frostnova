#include <stdio.h>
#include <stdlib.h>

// 定义邻接表中的节点结构体
typedef struct AdjListNode {
    int dest;
    struct AdjListNode* next;
} AdjListNode;

// 定义邻接表
typedef struct AdjList {
    AdjListNode* head;
} AdjList;

// 定义图结构体
typedef struct Graph {
    int V;
    AdjList* array;
} Graph;

// 创建一个新的邻接表节点
AdjListNode* newAdjListNode(int dest) {
    AdjListNode* newNode = (AdjListNode*)malloc(sizeof(AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// 创建一个图
Graph* createGraph(int V) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->V = V;

    // 创建一个大小为V的邻接列表数组
    graph->array = (AdjList*)malloc(V * sizeof(AdjList));//创建图的节点数量个头节点
    //array为一个储存各个顶尖头节点的结构体数组
    // 初始化每个邻接列表为空链表
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// 添加一条边到无向图
void addEdge(Graph* graph, int src, int dest) {
    // 添加从src到dest的边
    AdjListNode* newNode = newAdjListNode(dest);//创建被指向的节点
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;//头插

    // 因为是无向图，所以也需要添加从dest到src的边
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// 打印邻接表表示的图
void printGraph(Graph* graph) {
    for (int v = 0; v < graph->V; ++v) {//根据图的顶点数量打印
        AdjListNode* pCrawl = graph->array[v].head;
        printf("\n Adjacency list of vertex %d\n head ", v);
        while (pCrawl) {
            printf("-> %d", pCrawl->dest);
            pCrawl = pCrawl->next;
        }
        printf("\n");
    }
}

// 主函数测试邻接表实现
int main() {
    // 创建一个包含5个顶点的图
    int V = 5;
    Graph* graph = createGraph(V);

    // 添加边
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    // 打印图
    printGraph(graph);

    return 0;
}
